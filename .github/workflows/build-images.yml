name: Build Container Images

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/Containerfile'
      - '**/image.yml'
      - '.github/workflows/build-images.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**/Containerfile'
      - '**/image.yml'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        type: boolean
        default: false
      specific_image:
        description: 'Build specific image (directory name)'
        required: false
        type: string

env:
  REGISTRY: docker.io
  REGISTRY_USER: hansfischer

permissions:
  contents: read
  packages: write
  id-token: write  # Required for SLSA provenance
  attestations: write  # Required for attestations
  security-events: write  # Required for SARIF upload

jobs:
  discover-images:
    runs-on: self-hosted
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Discover image directories
        id: set-matrix
        run: |
          echo "Discovering directories with Containerfile and image.yml..."

          # Find all directories containing both Containerfile and image.yml
          dirs=()
          for dir in */; do
            if [[ -f "${dir}Containerfile" && -f "${dir}image.yml" ]]; then
              # Remove trailing slash
              dir_name=${dir%/}

              # Check if specific image is requested
              if [[ -n "${{ github.event.inputs.specific_image }}" ]]; then
                if [[ "$dir_name" == "${{ github.event.inputs.specific_image }}" ]]; then
                  dirs+=("$dir_name")
                fi
              else
                # Check if files changed in this directory (for non-force builds)
                if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]] || \
                   git diff --name-only HEAD~1 HEAD | grep -q "^${dir}" || \
                   [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                  dirs+=("$dir_name")
                fi
              fi
            fi
          done

          # Convert to JSON array
          printf -v joined '%s,' "${dirs[@]}"
          matrix="[\"${joined%,}\"]"

          echo "Found directories: ${dirs[*]}"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build-images:
    needs: discover-images
    if: needs.discover-images.outputs.matrix != '[""]'
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        image-dir: ${{fromJson(needs.discover-images.outputs.matrix)}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse image configuration
        id: config
        run: |
          cd "${{ matrix.image-dir }}"

          # Parse YAML file using yq or basic parsing
          if command -v yq >/dev/null 2>&1; then
            NAME=$(yq e '.name' image.yml)
            VERSION=$(yq e '.version' image.yml)
            DESCRIPTION=$(yq e '.description' image.yml)
            REGISTRY=$(yq e '.registry' image.yml)
            PLATFORMS=$(yq e '.platforms | join(",")' image.yml)
          else
            # Fallback parsing without yq
            NAME=$(grep '^name:' image.yml | cut -d' ' -f2- | tr -d '"')
            VERSION=$(grep '^version:' image.yml | cut -d' ' -f2- | tr -d '"')
            DESCRIPTION=$(grep '^description:' image.yml | cut -d' ' -f2- | tr -d '"')
            REGISTRY=$(grep '^registry:' image.yml | cut -d' ' -f2- | tr -d '"')
            PLATFORMS="linux/amd64,linux/arm64"
          fi

          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT
          echo "registry=$REGISTRY" >> $GITHUB_OUTPUT
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "full-name=$REGISTRY/$NAME" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: hansfischer
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.config.outputs.full-name }}
          tags: |
            # Version tag
            type=raw,value=${{ steps.config.outputs.version }}
            # Latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Stable tag for main branch
            type=raw,value=stable,enable={{is_default_branch}}
            # Branch name for non-main branches
            type=ref,event=branch,enable=${{ github.ref_name != 'main' }}
            # PR number for pull requests
            type=ref,event=pr
            # Git short SHA
            type=sha,prefix={{branch}}-,format=short
          labels: |
            org.opencontainers.image.title=${{ steps.config.outputs.name }}
            org.opencontainers.image.description=${{ steps.config.outputs.description }}
            org.opencontainers.image.version=${{ steps.config.outputs.version }}

      - name: Build and push container image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.image-dir }}
          file: ${{ matrix.image-dir }}/Containerfile
          platforms: ${{ steps.config.outputs.platforms }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ETCD_VERSION=${{ steps.config.outputs.version }}
            IMAGE_VERSION=${{ steps.config.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=${{ steps.config.outputs.description }}

      - name: Install Cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.2'

      - name: Install Syft for SBOM generation
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action/download-syft@v0.15.8

      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        id: sbom
        run: |
          # Extract image digest from build output
          IMAGE_DIGEST="${{ steps.build.outputs.digest }}"
          IMAGE_NAME="${{ steps.config.outputs.full-name }}"

          echo "Generating SBOM for ${IMAGE_NAME}@${IMAGE_DIGEST}"

          # Generate SBOM in multiple formats
          syft "${IMAGE_NAME}@${IMAGE_DIGEST}" -o spdx-json=sbom-${{ matrix.image-dir }}.spdx.json
          syft "${IMAGE_NAME}@${IMAGE_DIGEST}" -o cyclonedx-json=sbom-${{ matrix.image-dir }}.cyclonedx.json
          syft "${IMAGE_NAME}@${IMAGE_DIGEST}" -o syft-json=sbom-${{ matrix.image-dir }}.syft.json

          echo "sbom-path-spdx=sbom-${{ matrix.image-dir }}.spdx.json" >> $GITHUB_OUTPUT
          echo "sbom-path-cyclonedx=sbom-${{ matrix.image-dir }}.cyclonedx.json" >> $GITHUB_OUTPUT

      - name: Sign container image with Cosign
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          IMAGE_DIGEST="${{ steps.build.outputs.digest }}"
          IMAGE_NAME="${{ steps.config.outputs.full-name }}"

          echo "Signing ${IMAGE_NAME}@${IMAGE_DIGEST}"

          # Sign the container image
          cosign sign --yes "${IMAGE_NAME}@${IMAGE_DIGEST}"

          # Sign the SBOM
          cosign attest --yes --predicate sbom-${{ matrix.image-dir }}.spdx.json "${IMAGE_NAME}@${IMAGE_DIGEST}"

      - name: Generate SLSA Provenance
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.config.outputs.full-name }}
          subject-digest: ${{ steps.build.outputs.digest }}

      - name: Upload SBOM artifacts
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.image-dir }}
          path: |
            sbom-${{ matrix.image-dir }}.*.json
          retention-days: 30

      - name: Generate build summary
        if: always()
        run: |
          cd "${{ matrix.image-dir }}"
          echo "## 🐳 Container Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ steps.config.outputs.full-name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ steps.config.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** \`${{ steps.config.outputs.platforms }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Directory:** \`${{ matrix.image-dir }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            echo "### 🏷️ Generated Tags" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔒 Supply Chain Attestation" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **SLSA Provenance**: Generated and attached" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **SBOM**: Generated in SPDX and CycloneDX formats" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Cosign Signature**: Image and SBOM signed" >> $GITHUB_STEP_SUMMARY
            echo "- 📋 **Image Digest**: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔍 Verification Commands" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "# Verify signature" >> $GITHUB_STEP_SUMMARY
            echo "cosign verify ${{ steps.config.outputs.full-name }}@${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# View attestations" >> $GITHUB_STEP_SUMMARY
            echo "cosign verify-attestation ${{ steps.config.outputs.full-name }}@${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** Build only (PR mode, no push)" >> $GITHUB_STEP_SUMMARY
          fi

  security-scan:
    needs: [discover-images, build-images]
    if: needs.discover-images.outputs.matrix != '[""]' && github.event_name != 'pull_request'
    runs-on: self-hosted
    permissions:
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        image-dir: ${{fromJson(needs.discover-images.outputs.matrix)}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse image configuration
        id: config
        run: |
          cd "${{ matrix.image-dir }}"
          NAME=$(grep '^name:' image.yml | cut -d' ' -f2- | tr -d '"')
          VERSION=$(grep '^version:' image.yml | cut -d' ' -f2- | tr -d '"')
          REGISTRY=$(grep '^registry:' image.yml | cut -d' ' -f2- | tr -d '"')
          echo "full-name=$REGISTRY/$NAME:$VERSION" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.config.outputs.full-name }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.image-dir }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.image-dir }}.sarif'